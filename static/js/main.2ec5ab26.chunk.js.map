{"version":3,"sources":["SortVisualization/SortVisualization.js","App.js","reportWebVitals.js","index.js"],"names":["SIZE","working","delayed","queue","processQueue","length","setTimeout","shift","cb","delay","push","SortVisualization","props","state","array","disabled","max","min","Math","floor","random","this","resetArray","i","randomIntFromInterval","setState","console","log","temp_array","slice","j","String","temp","graph","key","data","map","x","out","className","onClick","insertionSort","bubbleSort","ResponsiveContainer","width","height","BarChart","margin","top","left","right","bottom","Bar","dataKey","fill","React","Component","index","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ec5ab26.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SortVisualization.css';\r\nimport { BarChart, Bar, ResponsiveContainer } from \"recharts\";\r\n\r\n//Array Definitions\r\nconst MAX = 1000;\r\nconst MIN = -500;\r\nconst SIZE = 50;\r\n\r\nvar working = false;\r\n\r\n/*\r\nTaken from: https://stackoverflow.com/questions/22815790/set-a-delay-timeout-inside-a-double-nested-loop\r\nCredit to: Yoshi, https://stackoverflow.com/users/697154/yoshi\r\n*/\r\nvar delayed = (function() {\r\n    var queue = [];\r\n  \r\n    /*\r\n    Processes queued functions with delay.\r\n    */\r\n    function processQueue() {\r\n      if (queue.length > 0) {\r\n        working = true;\r\n        setTimeout(function () {\r\n          if (queue.length == 1) {\r\n            working = false;\r\n          }\r\n          queue.shift().cb();\r\n          processQueue();\r\n        }, queue[0].delay);\r\n      }\r\n    }\r\n  \r\n    return function delayed(delay, cb) {\r\n      queue.push({ delay: delay, cb: cb });\r\n  \r\n      if (queue.length === 1) {\r\n        processQueue();\r\n      }\r\n    };\r\n}());\r\n\r\nexport default class SortVisualization extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            //disables buttons when working\r\n            disabled: false\r\n        };\r\n    }\r\n\r\n    randomIntFromInterval(max, min) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < SIZE; i++) {\r\n            array.push(this.randomIntFromInterval(MAX,MIN));\r\n        }\r\n        this.setState({array});\r\n        console.log(array);\r\n    }\r\n\r\n    /*\r\n    Sorts array using Bubble Sort and logs the swaps to a queue for delayed processing to be displayed.\r\n    */\r\n    bubbleSort() {\r\n        var temp_array = this.state.array.slice();\r\n        let swaps = 0;\r\n        let comparisons = 0;\r\n\r\n        this.state.disabled = true;\r\n        for (let i = 0 ; i < SIZE - 1 ; i++) {\r\n            for (let j = 0 ; j < SIZE - i - 1; j++) {\r\n                if (temp_array[j] > temp_array[j + 1]) {\r\n                    //log required swaps necessary for sorted array\r\n                    console.log(\"swapping:\" + String(j), String(j+1));\r\n                    swaps += 1;\r\n                    let temp = temp_array[j + 1];\r\n                    temp_array[j+1] = temp_array[j];\r\n                    temp_array[j] = temp;\r\n                    //implement the swaps in the displayed array\r\n                    delayed(3000/SIZE, function(j, graph) {\r\n                        return function() {\r\n                            console.log(\"actually swapping:\" + String(j), String(j+1));\r\n                            let temp = graph.state.array[j+1];\r\n                            graph.state.array[j+1] = graph.state.array[j];\r\n                            graph.state.array[j] = temp;\r\n                            console.log(graph.state.array);\r\n                            graph.setState(graph.state.array);\r\n                            //reenable control panel when sorting done\r\n                            if (!working) {\r\n                                graph.state.disabled = true;\r\n                                graph.setState();\r\n                            }\r\n                        };\r\n                    }(j, this));\r\n                }\r\n            }\r\n        }\r\n        console.log(temp_array);\r\n    }\r\n\r\n    /*\r\n    Sorts array using Insertion Sort and logs the swaps to a queue for delayed processing to be displayed.\r\n    */\r\n    insertionSort() {\r\n        var temp_array = this.state.array.slice();\r\n        let i, key, j; \r\n        this.state.disabled = true;\r\n        for (i = 1; i < SIZE; i++) { \r\n            key = temp_array[i];\r\n            j = i - 1; \r\n            while (j >= 0 && temp_array[j] > key) { \r\n                temp_array[j + 1] = temp_array[j]; \r\n                //log swaps to queue\r\n                delayed(3000/SIZE, function(j, graph) {\r\n                    return function() {\r\n                        console.log(\"actually swapping:\" + String(j), String(j+1));\r\n                        graph.state.array[j + 1] = graph.state.array[j];\r\n                        graph.setState(graph.state.array);\r\n                        //reenable control panel when sorting done\r\n                        if (!working) {\r\n                            graph.state.disabled = true;\r\n                            graph.setState();\r\n                        }\r\n                    };\r\n                }(j, this));\r\n                j = j - 1; \r\n            } \r\n            temp_array[j + 1] = key; \r\n            //log swaps to queue\r\n            delayed(3000/SIZE, function(j, key, graph) {\r\n                return function() {\r\n                    console.log(\"actually swapping:\" + String(j), String(j+1));\r\n                    graph.state.array[j + 1] = key;\r\n                    console.log(graph.state.array);\r\n                    graph.setState(graph.state.array);\r\n                    //reenable control panel when sorting done\r\n                    if (!working) {\r\n                        graph.state.disabled = true;\r\n                        graph.setState();\r\n                    }\r\n                };\r\n            }(j, key, this));\r\n        } \r\n        console.log(\"TEMP:\" + String(temp_array));\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const data = this.state.array.map(x => ({out : x}));\r\n\r\n        return (\r\n            <fragment>\r\n            <div className = \"control_panel\">\r\n                <button onClick={() => this.resetArray()} disabled={working}>Reset Chart</button>\r\n                <button onClick={() => this.insertionSort()} disabled={working}>Insertion Sort</button>\r\n                <button onClick={() => this.bubbleSort()} disabled={working}>Bubble Sort</button>\r\n            </div>\r\n            <ResponsiveContainer width=\"80%\" height={600} className = \"main-graph\">\r\n            <BarChart data={data} margin={{ top: 0, left: 0, right: 200, bottom: 0 }}><Bar dataKey=\"out\" fill= \"#63bce9\" />\r\n            </BarChart>\r\n            </ResponsiveContainer>\r\n            <div className = \"separator\">\r\n                \r\n            </div>\r\n            </fragment>\r\n        );\r\n    }\r\n}","import './App.css';\r\nimport SortVisualization from './SortVisualization/SortVisualization.js';\r\n\r\nfunction index() {\r\n  return (\r\n    <fragment>\r\n    <head>\r\n      <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600&display=swap\" rel=\"stylesheet\"></link>\r\n    </head>\r\n    <div className = \"header\">\r\n      <h1>Sorting Visualizer</h1>\r\n    </div>\r\n    <div className = \"graph\">\r\n      <SortVisualization> </SortVisualization>  \r\n    </div>\r\n    <footer className = \"footer\">\r\n\r\n    </footer>\r\n    </fragment>\r\n  );\r\n}\r\n\r\nexport default index;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}